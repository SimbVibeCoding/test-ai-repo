@mixin font-face($fontname, $filename) {
  @font-face {
    font-family: $fontname;
    src: url("fonts/#{$filename}.eot");
    src: url("fonts/#{$filename}.woff2") format('woff2'),
    url("fonts/#{$filename}.woff") format('woff'),
    url("fonts/#{$filename}.eot?#iefix") format('embedded-opentype'),
    url("fonts/#{$filename}.ttf") format('truetype'),
    url("fonts/#{$filename}.svg##{$fontname}") format('svg');
    font-weight: normal;
    font-style: normal;
    font-size: $font-size-testo;
  }
}


@mixin elenco-categorie() {
  width: 100%;
  max-width: $desktop;
  @include flex-default;
  margin: 0 auto 40px;

  .tax {
    flex: 1 1;
    margin: 0 10px;
    position: relative;

    h3.titolo {
      background-color: rgba($color-main2, 0.5);
      width: 100%;
      margin: 0;
      padding: 20px 0;
      color: $color-neutro4;
      text-align: center;

      &.absolute {
        position: absolute;
        bottom: 0;
      }

      &:hover {
        background-color: rgba($color-main1, 0.5);

        a {
          color: $color-neutro4;
        }
      }
    }

    .excerpt {
      display: none;
    }

    .img {
      padding: 0;
      margin: 0;

      img {
        width: 100%;
        display: block;
      }
    }
  }
}

@mixin slickslider-arrow($size: 30px, $posleft: 0, $posright: 0, $background-color: transparent, $content-left: $var-icon-arrowleft, $content-right: $var-icon-arrowright, $button-class: ".slick-arrow") {
  #{$button-class} {
    z-index: 1000;

    &:before {
      color: $color-main2;
      font-family: $var-iconsfamily;
      background-color: $background-color;
      width: $size;
      line-height: $size;
      padding: 0;
      margin: 0;
      display: block;
    }

    &.slick-next {
      right: $posright;

      &:before {
        content: $content-right;
      }
    }

    &.slick-prev {
      left: $posleft;

      &:before {
        content: $content-left;
      }
    }
  }
}

@mixin grid-articoli-salvattore($gridselector: '#grid', $columnselector: '.column') {
  $map: (
    ".size-1of1": 100%,
    ".size-1of2": 50%,
    ".size-1of3": 33.333%,
    ".size-1of4": 25%,
    ".size-1of6": 16.666%,
  );

//@warn "add the data-columns attribute to the grid element.";
#{$gridselector}[data-columns]::before {
  content: '6 .column.size-1of6';
}

#{$columnselector} {
  float: left;

  @each $class, $size in $map {
    &#{$class} {
      width: $size;
    }
  }

  article {
    @content;
  }
}

@media screen and (max-width: $mobile) {
  #{$gridselector}[data-columns]::before {
    content: '1 .column.size-1of1';
  }
}

@media screen and (min-width: $tablet) and (max-width: $desktop) {
  #{$gridselector}[data-columns]::before {
    content: '2 .column.size-1of2';
  }
}

@media screen and (min-width: $desktop) {
  #{$gridselector}[data-columns]::before {
    content: '4 .column.size-1of4';
  }
}
}

@mixin list-style($ontent: $var-icon-arrowright, $color: $color-main2, $fontsize: 10px, $fontfamily: $var-iconsfamily) {
  &:before {
    display: inline-block;
    font-family: $fontfamily;
    font-size: $fontsize;
    content: $ontent;
    color: $color;
    padding: 0 10px;
  }
}

@mixin separatore($colorText: $color-main1, $colorLine: $color-neutro3, $fontSize: $titoli-secondari, $fontFamily: $font-family2, $textTranform: uppercase) {
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-between;
  text-align: center;
  align-items: center;
  position: relative;
  color: $colorText;
  margin-top: 20px;
  width: 100%;
  white-space: nowrap;
  text-transform: $textTranform;
  font-size: $fontSize;
  font-family: $fontFamily;
  color: $colorText;
  white-space: nowrap;
  text-decoration: none;
  padding: 0 10px;

  &:after,
  &:before {
    z-index: 0;
    display: block;
    content: "";
    width: 50%;
    //position: absolute;
    top: 50%;
    height: 1px;
    background: $colorLine;
  }

  &.even {
    color: $colorText;
    padding-bottom: 40px;

    &:after,
    &:before {
      background-color: $colorLine;
    }

    a {
      color: $colorText;
    }
  }

  &:before {
    left: 0;
  }

  &:after {
    right: 0;
  }

  a {
    text-transform: $textTranform;
    font-size: $fontSize;
    font-family: $fontFamily;
    color: $colorText;
    white-space: nowrap;
    text-decoration: none;
    padding: 0 10px;
  }
}

@mixin flex-wall-single-col() {
  @include flex-wall(wrap, row, flex-start, flex-start, flex-start);
}

@mixin flex-wall($flex-wrap: wrap, $flex-direction: row, $justify-content: space-between, $align-items: center, $align-content: flex-start) {
  display: flex;
  flex-direction: $flex-direction;
  flex-wrap: $flex-wrap;
  justify-content: $justify-content;
  align-items: $align-items;
  align-content: $align-content;
}

@mixin flex-items($itemSelector: item, $flex-grow: 0, $flex-shrink: 0, $flex-basis: auto, $justify-content: space-between, $align-items: center, $align-self: null) {
  .#{$itemSelector} {
    flex: $flex-grow $flex-shrink $flex-basis;

    @if($align-self) {
      align-self: $align-self;
    }
  }
}

@mixin flex-default($justify-content: space-between, $align-items: center, ) {
  display: flex;
  flex-flow: row wrap;
  justify-content: $justify-content;
  align-items: $align-items;
}
@mixin flex-columns($columns: 1, $gap: 1rem,$item:".item-list") {
  display: flex;
  flex-wrap: wrap;
  gap: $gap;
  & > #{$item} {
    flex: 1 1 calc(100% / #{$columns} );
    max-width: calc(100% / #{$columns});
  }
}

@mixin generate-random-content($gridselector: '.grid', $itemSelector: '.item', $itemsnumber: 12, $subsnumber: 3) {
  $items: $itemsnumber;

  @while $items >0 {
    #{$gridselector}#{$items} {
      $subs: $subsnumber;

      @while $subs >0 {
        #{$itemSelector}#{$subs} {
          //height: random(200)*1px;
          min-height: 50px;
          //background-color: rgb(random(255),random(255),random(255));
        }

        $subs: $subs - 1;
      }
    }

    $items: $items - 1;
  }
}

@mixin flex-fill-subitem($gridselector: '.grid', $itemSelector: '.item', ) {
  #{$gridselector} {
    //@mixin flex-wall($flex-wrap:wrap,$flex-direction:row,$justify-content:space-between,$align-items:center,$align-content:flex-start) {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: stretch;
    @include flex-items(item, 1, 0);

    #{$itemSelector} {
      @include flex-items(sub, 0, 0, 100%);
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      align-items: stretch;
      min-width: 200px;

      @include respond-to('lg') {}
    }

    @include generate-random-content
  }
}

@mixin reset_box_model() {
  padding: 0;
  margin: 0;
  border: none;
}

@mixin absolute_center($top: 50%, $left: 50%, $translateTop: -50%, $translateLeft: -50%) {
  position: absolute;
  top: $top;
  left: $left;
  transform: translate($translateLeft, $translateTop);
}

/*
Questo mixin è utile per far sì che un elemento, come un overlay di sfondo o un elemento a schermo intero, riempia completamente il suo contenitore. Inoltre, permette di controllarne l'opacità, rendendolo ideale per overlay, effetti di sfondo o componenti a schermo intero.
*/

@mixin fill_container($opacity: 1) {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: $opacity;
  display: block;
  content:"";
  @content;
}

@mixin pseudoelement_block_content($content: " ", $display: inline-block, $content-image: false) {
  //@debug pseudoelement_block_content content #{ $content};
  
  // @debug aaa pseudoelement_block_content content-image #{ $content-image};
  // @debug aaa pseudoelement_block_content content  $content;
  @if $content-image {
    content: url("#{$content}");
  }  @else {
    content: "#{$content}";
  }
  width: auto;
  display: $display;
}

@mixin before_block_icon($content-image: false, $content: $var-icon-arrowleft, $padding: 10px, $font-size: $font-size-testo, $clear: true,$initiator:null) {
  @if #{$clear} {
    &:after {
      content: "";
    }
  }

   //@debug $initiator;
  // @debug before_block_icon content  $content;
  // @debug before_block_icon content-image  $content-image;
  &:before {
    @include pseudoelement_block_content($content:$content, $content-image: $content-image);
    font-family: $var-iconsfamily;
    padding: 0 $padding 0 0;
  }
}

@mixin after_block_icon($content-image: false, $content: $var-icon-arrowright, $padding: 10px, $font-size: $font-size-testo, $clear: true,$initiator:null) {
  @if $clear ==true {
    &:before {
      content: "";
    }
  }
  //@debug $content;
  // @debug aaaafter_block_icon content-image #{$content-image};
  //@debug aaaafter_block_icon content-image  #{$content-image};
  &:after {
    @include pseudoelement_block_content($content:$content, $content-image: $content-image);
    font-family: $var-iconsfamily;
    padding: 0 0 0 $padding;
  }
}

@mixin text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

  @if abs($color-brightness) < ($light-color/2) {
    color: white;
  }

  @else {
    color: black;
  }
}

@mixin color_contrast($value) {
  background-color: $value;
  @include text-contrast($value);
  content: "" +$value;
}

@mixin stile_header($size, $font-family: $font-family1, $color: $nero, $weight: 400) {
  font-family: $font-family;
  font-size: $size;
  font-weight: $weight;
  color: $color;
}

@mixin contact-box($size, $font-family: $font-family1, $color: $color-main1, $weight: 400) {
  font-family: $font-family;
  font-size: $size;
  font-weight: $weight;
  color: $color;
}

@mixin sfumatura($color1: $color-main1, $color2: $color-main2) {
  background-color: $color1;
  background-image: linear-gradient(to bottom, $color1, $color2);
}

@mixin button($bgcolor: transparent, $color: $color-neutro1, $hovercolor: $color-neutro1, $hoverbgcolor: $color-neutro2, $border-color: $color-neutro1) {
  background-color: $bgcolor;
  padding: 16px 32px;
  color: $color;
  display: inline-block;
  border-radius: 78px;  
  border: 1px solid $border-color;
  transition: all 0.5s;  
  font-size: 14px;
  font-weight: 600;
  line-height: 14px;
    &:hover {
      background-color: $hoverbgcolor;   
      color: $hovercolor!important;
      transition: all 0.5s;
    }  
}

@mixin embed-responsive ($container: '.wp-block-embed__wrapper') {
  #{$container} {
    position: relative;
    padding-bottom: 56.25%;
    overflow: hidden;
    max-width: 100%;
    height: auto;
  }

  #{$container} embed,
  #{$container} iframe,
  #{$container} object {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}




// For each breakpoint, define the maximum width of the container in a media query
@mixin respond-to($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    @media (min-width: #{map-get($grid-breakpoints, $breakpoint)}) {
      @content;
    }
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "+"Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

  @if abs($color-brightness) < ($light-color/2) {
    color: white;
  }

  @else {
    color: black;
  }
}

// stili


@mixin stile-titoli($font-size: $titoli-secondari) {
  font-size: $font-size;
  font-family: $font-family2;
  color: $color-neutro1;
}

@mixin stile-date($font-size: $font-size-testo) {
  font-size: $font-size-data;
  font-family: $font-family1;
  color: $color-neutro3;
}

@mixin stile-excerpt($font-size: $font-size-testo) {
  font-size: $font-size-testo;
  font-family: $font-family1;
  color: $color-neutro1;
}

@mixin image-background($min-height: 25vh, $background-position: center center, $background-size: cover, $background-repeat: no-repeat) {
  min-height: $min-height;
  background-repeat: $background-repeat;
  background-position: $background-position;
  background-size: $background-size;
}


@mixin extend-all($container) {
  @if #{$container} {
    @media screen and (min-width:$bootstrap-grid-breakpoint-xl) {
      margin-left: calc(-100vw / 2 + #{map-get($container-max-widths, "xl")-$grid-gutter-width/2} / 2);
      margin-right: calc(-100vw / 2 + #{map-get($container-max-widths, "xl")-$grid-gutter-width/2} / 2);
    }


  }
}

// ************************* Gutemberg ********************************
@mixin extend-atomic-gutemberg-container() {
  @include extend-container2(".wp-block-atomic-blocks-ab-container", ".ab-container-inside")
}

@mixin gutemberg-block-copertina-testo-maxheight() {
  @media screen and (max-width:$tablet) {
    &.has-2-columns {
      .wp-block-column {
        .wp-block-cover {
          min-height: 400px;
        }
      }

      &.even {
        .wp-block-column {
          .wp-block-cover {}

          order: 2;

          &:nth-child(2) {
            order: 1;
          }
        }
      }
    }
  }

  .wp-block-column {
    .wp-block-cover {
      min-height: 100%;
    }
  }
}

@mixin fix-gutemberg-block-columns-responsive() {

  // fix comportamento colonne in bootstrap
  @media (min-width: $mobile) {

    //resetto i breakpont di gutemberg
    .wp-block-column:not(:last-child) {
      margin-right: 0;
    }

    .wp-block-column {
      flex-basis: 100%;
      flex-grow: 0;
    }

    .wp-block-column:not(:first-child),
    .wp-block-column:nth-child(2n) {
      margin-left: 0;
    }
  }

  //imposto i breakpoint di bootstrap
  @media (min-width: $tablet) {
    .wp-block-column:not(:last-child) {
      margin-right: 32px;
    }

    .wp-block-column {
      flex-basis: 50%;
      flex-grow: 0;
    }

    .wp-block-column:not(:first-child),
    .wp-block-column:nth-child(2n) {
      margin-left: 32px;
    }
  }
}

@mixin bootstrap-media-breakpoint-up() {
  @include media-breakpoint-up($breakpoint, $breakpoints) {}
}

//**************************************bootstrap **************************
@mixin bootstrap-make-row {
  @include make-row;
}

@mixin media-breakpoint-up-map-class($colSelectormap, $colSelectorSizesMap) {
  @each $selector, $colsnumberListMap in $colSelectormap {
    @include media-breakpoint-up-unique-class($selector, $colsnumberListMap)
  }
}

@mixin media-breakpoint-up-unique-class($colSelector, $colSelectorSizesMap) {
  #{$colSelector} {
    @each $breakpoint, $colsnumber in $colSelectorSizesMap {
      @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
        @include make-col($colsnumber);
      }
    }
  }
}

@mixin make-bootstrap-col-structure-responsive($containerSelector, $rowSelector, $colSelector, $colSelectorSizesMap) {
  #{$containerSelector} {
    @include make-container();

    #{$rowSelector} {
      @include make-row();

      @if is-map($colSelector) {
        @include media-breakpoint-up-map-class($colSelector, $colSelectorSizesMap)
      }

      @else {
        @include media-breakpoint-up-unique-class($colSelector, $colSelectorSizesMap)
      }
    }
  }
}

@mixin make-bootstrap-col-structure($containerSelector, $rowSelector, $colSelectors, $colnumber: 4) {
  #{$containerSelector} {
    @include make-container();

    #{$rowSelector} {
      @include make-row();

      @if is-map($colSelectors) {
        @each $colSelector, $colnumbers in $colSelectors {
          #{$colSelector} {
            @include make-col-ready();
            @include make-col($colnumbers);
          }
        }
      }

      @else {
        #{$colSelectors} {
          @include make-col-ready();
          @include make-col($colnumber);
        }
      }
    }
  }
}

/*
*
*
       |<---- site width ---->|
.......|-----------|----------!.......
.......|           |
.......|    boxed  |     full --->
.......|           |
.......|-----------|----------!.......
 */



@mixin extend-container2($content: '.content-widget', $boxed: false) {
  //compenso la differenza tra la width del container e quella della finestra considerando i padding laterali
  // width: calc(100vw - #{$grid-gutter-width}/2); /* Larghezza pari a quella della viewport */
  width: calc(100vw ); /* Larghezza pari a quella della viewport */
  margin-left: calc(-50vw + 50%); /* Centra l'elemento */
  #{$content} {
    padding-left: 20px;
    padding-right: 20px;
    @media screen and(max-width:$tablet){
    }
    .wp-block-columns {
      .wp-block-column{

      }
    }
  }
  // @media screen and (min-width:$bootstrap-grid-breakpoint-xs) {
  // }
  // @media screen and (min-width:$bootstrap-grid-breakpoint-sm) {
  // }
  // @media screen and (min-width:$bootstrap-grid-breakpoint-md) {
  // }
  // @media screen and (min-width:$bootstrap-grid-breakpoint-lg) {
  // }
  // @media screen and (min-width:$bootstrap-grid-breakpoint-xl) {
  // }

  @if($boxed) {
    #{$content} {
      margin: 0 auto;
      max-width: $site-width;
    }
  }
}

@mixin style-section-full-content-halfboxed($target-boxed: ".loop-item-content-wrapper",  $content: '.section-content') {
  @include extend-container2($content);

  #{$content} {
    //margin: 0 auto;

    #{$target-boxed} {
      @include half-width;
      // align-self: center;
      padding-left: $grid-gutter-width;
      padding-right: $grid-gutter-width;
      padding-top: $default-wp-group-padding-vertical;
      padding-bottom: $default-wp-group-padding-vertical;
    }
  }
}


@mixin half-width {
  max-width:calc(1400px/2);
}

@mixin gutemberg-block-copertina-testo-maxheight() {
  @media screen and (max-width:$tablet) {
    &.has-2-columns {
      .wp-block-column {
        .wp-block-cover {
          min-height: 400px;
        }
      }

      &.even {
        .wp-block-column {
          .wp-block-cover {}

          order: 2;

          &:nth-child(2) {
            order: 1;
          }
        }
      }
    }
  }

  .wp-block-column {
    .wp-block-cover {
      min-height: 100%;
    }
  }
}

@mixin fix-gutemberg-block-columns-responsive() {

  // fix comportamento colonne in bootstrap
  @media (min-width: $mobile) {

    //resetto i breakpont di gutemberg
    .wp-block-column:not(:last-child) {
      margin-right: 0;
    }

    .wp-block-column {
      flex-basis: 100%;
      flex-grow: 0;
    }

    .wp-block-column:not(:first-child),
    .wp-block-column:nth-child(2n) {
      margin-left: 0;
    }
  }

  //imposto i breakpoint di bootstrap
  @media (min-width: $tablet) {
    .wp-block-column:not(:last-child) {
      margin-right: 32px;
    }

    .wp-block-column {
      flex-basis: 50%;
      flex-grow: 0;
    }

    .wp-block-column:not(:first-child),
    .wp-block-column:nth-child(2n) {
      margin-left: 32px;
    }
  }
}


@mixin deep-gap($space) {
  & > div > div {
    gap: $space;
  }
}


@import "mixin-aliases";