@mixin font-face($fontname, $filename) {
  @font-face {
    font-family: $fontname;
    src: url("fonts/#{$filename}.eot");
    src: url("fonts/#{$filename}.woff2") format('woff2'), url("fonts/#{$filename}.woff") format('woff'), url("fonts/#{$filename}.eot?#iefix") format('embedded-opentype'), url("fonts/#{$filename}.ttf") format('truetype'), url("fonts/#{$filename}.svg##{$fontname}") format('svg');
    font-weight: normal;
    font-style: normal;
    font-size: $font-size-testo;
  }
}
@mixin elenco-categorie() {
  width: 100%;
  max-width: $desktop;
  @include flex-default;
  margin: 0 auto 40px;

  .tax {
    flex: 1 1;
    margin: 0 10px;
    position: relative;

    h3.titolo {
      background-color: rgba($color-main2, 0.5);
      width: 100%;
      margin: 0;
      padding: 20px 0;
      color: $color-neutro4;
      text-align: center;

      &.absolute {
        position: absolute;
        bottom: 0;
      }

      &:hover {
        background-color: rgba($color-main1, 0.5);

        a {
          color: $color-neutro4;
        }
      }
    }

    .excerpt {
      display: none;
    }

    .img {
      padding: 0;
      margin: 0;

      img {
        width: 100%;
        display: block;
      }
    }
  }
}
@mixin slickslider-arrow($size: 30px,$posleft:0,$posright:0,$background-color:transparent, $content-left: $var-icon-arrowleft,$content-right: $var-icon-arrowright, $button-class:".slick-arrow") {
  #{$button-class} {
    z-index: 1000;

    &:before {
      color: $color-main2;
      font-family: $var-fontellofamily;
      background-color: $background-color;
      width: $size;
      line-height: $size;
      padding: 0;
      margin: 0;
      display: block;
    }

    &.slick-next {
      right: $posright;

      &:before {
        content: $content-right;
      }
    }

    &.slick-prev {
      left: $posleft;

      &:before {
        content: $content-left;
      }
    }
  }
}
@mixin grid-articoli-salvattore($gridselector:'#grid', $columnselector:'.column') {
  $map: (
    ".size-1of1": 100%,
    ".size-1of2": 50%,
    ".size-1of3": 33.333%,
    ".size-1of4": 25%,
    ".size-1of6": 16.666%,
  );
  //@warn "add the data-columns attribute to the grid element.";
  #{$gridselector}[data-columns]::before {
    content: '6 .column.size-1of6';
  }

  #{$columnselector} {
    float: left;
    @each $class,$size in $map {
      &#{$class} {
        width: $size;
      }
    }

    article {
      @content;
    }
  }
  @media screen and (max-width: $mobile) {
    #{$gridselector}[data-columns]::before {
      content: '1 .column.size-1of1';
    }
  }
  @media screen and (min-width: $tablet) and (max-width: $desktop) {
    #{$gridselector}[data-columns]::before {
      content: '2 .column.size-1of2';
    }
  }
  @media screen and (min-width: $desktop) {
    #{$gridselector}[data-columns]::before {
      content: '4 .column.size-1of4';
    }
  }
}
@mixin list-style($ontent: $var-icon-arrowright, $color:$color-main2,$fontsize:10px,$fontfamily:$var-fontellofamily) {
  &:before {
    display: inline-block;
    font-family: $fontfamily;
    font-size: $fontsize;
    content: $ontent;
    color: $color;
    padding: 0 10px;
  }
}
@mixin separatore($colorText:$color-main1,$colorLine:$color-neutro3,$fontSize:$titoli-secondari,$fontFamily:$font-family2,$textTranform:uppercase) {
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-between;
  text-align: center;
  align-items: center;
  position: relative;
  color: $colorText;
  margin-top: 20px;
  width: 100%;
  white-space: nowrap;
  text-transform: $textTranform;
  font-size: $fontSize;
  font-family: $fontFamily;
  color: $colorText;
  white-space: nowrap;
  text-decoration: none;
  padding: 0 10px;

  &:after,
  &:before {
    z-index: 0;
    display: block;
    content: "";
    width: 50%;
    //position: absolute;
    top: 50%;
    height: 1px;
    background: $colorLine;
  }

  &.even {
    color: $colorText;
    padding-bottom: 40px;

    &:after,
    &:before {
      background-color: $colorLine;
    }

    a {
      color: $colorText;
    }
  }

  &:before {
    left: 0;
  }

  &:after {
    right: 0;
  }

  a {
    text-transform: $textTranform;
    font-size: $fontSize;
    font-family: $fontFamily;
    color: $colorText;
    white-space: nowrap;
    text-decoration: none;
    padding: 0 10px;
  }
}
@mixin flex-wall-single-col() {
  @include flex-wall(wrap,row,flex-start,flex-start,flex-start);
}
@mixin flex-wall($flex-wrap:wrap,$flex-direction:row,$justify-content:space-between,$align-items:center,$align-content:flex-start) {
  display: flex;
  flex-direction: $flex-direction;
  flex-wrap: $flex-wrap;
  justify-content: $justify-content;
  align-items: $align-items;
  align-content: $align-content;
}
@mixin flex-items($itemSelector:item,$flex-grow:0,$flex-shrink:0, $flex-basis:auto,$justify-content:space-between,$align-items:center,$align-self:null) {
  .#{$itemSelector} {
    flex: $flex-grow $flex-shrink $flex-basis;
    @if($align-self) {
      align-self: $align-self;
    }
  }
}
@mixin flex-default($justify-content:space-between,$align-items:center,) {
  display: flex;
  flex-flow: row wrap;
  justify-content: $justify-content;
  align-items: $align-items;
}
@mixin generate-random-content($gridselector:'.grid',$itemSelector:'.item',$itemsnumber:12, $subsnumber: 3) {
  $items: $itemsnumber;
  @while $items > 0 {
    #{$gridselector}#{$items} {
      $subs: $subsnumber;
      @while $subs > 0 {
        #{$itemSelector}#{$subs} {
          //height: random(200)*1px;
          min-height: 50px;
          //background-color: rgb(random(255),random(255),random(255));
        }
        $subs: $subs - 1;
      }
    }
    $items: $items - 1;
  }
}
@mixin flex-fill-subitem($gridselector:'.grid',$itemSelector:'.item',) {
  #{$gridselector} {
    //@mixin flex-wall($flex-wrap:wrap,$flex-direction:row,$justify-content:space-between,$align-items:center,$align-content:flex-start) {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: stretch;
    @include flex-items(item, 1 ,0);

    #{$itemSelector} {
      @include flex-items(sub, 0 ,0, 100%);
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      align-items: stretch;
      min-width: 200px;
      border: 1px solid red;
      @include respond-to('lg') {}
    }
    @include generate-random-content
  }
}
@mixin reset_box_model() {
  padding: 0;
  margin: 0;
  border: none;
}
@mixin absolute_center($top:50%, $left: 50%) {
  position: absolute;
  top: $top;
  left: $left;
  transform: translate(-50%,-50%);
}
@mixin fill_container($opacity:1) {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: $opacity;
  display: block;
}
@mixin pseudoelement_block_content($content:" ",$display:inline-block) {
  content: $content;
  width: auto;
  display: $display;
}
@mixin before_block_icon($content:$var-icon-arrowleft,$padding:10px,$font-size:$font-size-testo,$clear:true) {
  @if $clear == true {
    &:after {
      content: "";
    }
  }

  &:before {
    @include pseudoelement_block_content($content) font-family: $var-iconsfamily;
    content: $content;
    font-size: $font-size;
    padding: 0 $padding 0 0;
  }
}
@mixin after_block_icon($content:$var-icon-arrowright,$padding:10px,$font-size:$font-size-testo,$clear:true) {
  @if $clear == true {
    &:before {
      content: "";
    }
  }

  &:after {
    @include pseudoelement_block_content($content) font-family: $var-iconsfamily;
    font-size: $font-size;
    padding: 0 0 0 $padding;
  }
}
@mixin text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);
  @if abs($color-brightness) < ($light-color/2) {
    color: white;
  } @else {
    color: black;
  }
}
@mixin color_contrast($value) {
  background-color: $value;
  @include text-contrast($value);
  content: ""+$value;
}
@mixin stile_header($size, $font-family:$font-family1, $color:$nero, $weight:400) {
  font-family: $font-family;
  font-size: $size;
  font-weight: $weight;
  color: $color;
}
@mixin contact-box($size, $font-family:$font-family1, $color:$color-main1, $weight:400) {
  font-family: $font-family;
  font-size: $size;
  font-weight: $weight;
  color: $color;
}
@mixin sfumatura($color1:$color-main1, $color2:$color-main2) {
  background-color: $color1;
  background-image: linear-gradient(to bottom, $color1, $color2);
}
@mixin button($bgcolor: $color-main1,$color:$color-neutro1,$padding-button:20px) {
  background-color: $bgcolor;
  padding: $padding-button;
  color: $color;
  border-radius: 0;
  border-color: transparent;
  border: none;
}
// For each breakpoint, define the maximum width of the container in a media query
@mixin respond-to($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    @media (min-width: #{map-get($grid-breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. " + "Please make sure it is defined in `$breakpoints` map.";
  }
}
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}
@mixin text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);
  @if abs($color-brightness) < ($light-color/2) {
    color: white;
  } @else {
    color: black;
  }
}
// stili
@mixin style-form($color:$color-neutro2,$font-family:$font-family2,$inputBackground:$color-neutro3-chiaro,$submitBackground:$color-main1,$submitColor:$color-neutro4,$submitBackgroundHover:$color-main2) {
  label {
    color: $color;
    font-family: $font-family;
    width: 100%;
  }

  input {
    width: 100%;
    border: 1px solid $color-neutro3;
    background: $inputBackground;
    padding: 10px;

    &[type="submit"] {
      background: $submitBackground;
      padding: 20px;
      color: $submitColor;

      &:hover {
        background: $submitBackgroundHover;
      }
    }
  }
}
@mixin stile-titoli($font-size: $titoli-secondari) {
  font-size: $font-size;
  font-family: $font-family2;
  color: $color-neutro1;
}
@mixin stile-date($font-size: $font-size-testo) {
  font-size: $font-size-data;
  font-family: $font-family1;
  color: $color-neutro3;
}
@mixin stile-excerpt($font-size: $font-size-testo) {
  font-size: $font-size-testo;
  font-family: $font-family1;
  color: $color-neutro1;
}
@mixin image-background($min-height:25vh,$background-position:center center,$background-size:cover,$background-repeat: no-repeat) {
  min-height: $min-height;
  background-repeat: $background-repeat;
  background-position: $background-position;
  background-size: $background-size;
}
@mixin extend-atomic-gutemberg-container(){
  @include extend-container(".wp-block-atomic-blocks-ab-container", ".ab-container-inside")
}
// ************************* Gutemberg ********************************
@mixin gutemberg-block-copertina-testo-maxheight() {
  @media screen and (max-width:$tablet) {
    &.has-2-columns {
      .wp-block-column {
        .wp-block-cover {
          min-height: 400px;
        }
      }

      &.even {
        .wp-block-column {
          .wp-block-cover {}
          order: 2;

          &:nth-child(2) {
            order: 1;
          }
        }
      }
    }
  }

  .wp-block-column {
    .wp-block-cover {
      min-height: 100%;
    }
  }
}
@mixin fix-gutemberg-block-columns-responsive() {
  // fix comportamento colonne in bootstrap
  @media (min-width: $mobile) {
    //resetto i breakpont di gutemberg
    .wp-block-column:not(:last-child) {
      margin-right: 0;
    }

    .wp-block-column {
      flex-basis: 100%;
      flex-grow: 0;
    }

    .wp-block-column:not(:first-child),
    .wp-block-column:nth-child(2n) {
      margin-left: 0;
    }
  }
  //imposto i breakpoint di bootstrap
  @media (min-width: $tablet) {
    .wp-block-column:not(:last-child) {
      margin-right: 32px;
    }

    .wp-block-column {
      flex-basis: 50%;
      flex-grow: 0;
    }

    .wp-block-column:not(:first-child),
    .wp-block-column:nth-child(2n) {
      margin-left: 32px;
    }
  }
}
@mixin bootstrap-media-breakpoint-up() {
  @include media-breakpoint-up($breakpoint, $breakpoints) {}
}

@mixin extend-container($container, $content){
  @if #{$container} {
    @media screen and (min-width:$bootstrap-grid-breakpoint-xl){
       margin-left: calc(-100vw / 2 + #{map-get($container-max-widths, "xl")-$grid-gutter-width/2} / 2);
       margin-right: calc(-100vw / 2 + #{map-get($container-max-widths, "xl")-$grid-gutter-width/2} / 2);
    }
    #{$content}{
      @media screen and (min-width:$bootstrap-grid-breakpoint-xl){
        margin: 0 auto;
        width:map-get($container-max-widths, "xl");
      }
    }
  }
}

//**************************************bootstrap **************************
@mixin bootstrap-make-row {
  @include make-row;
}
@mixin media-breakpoint-up-map-class($colSelectormap,$colSelectorSizesMap) {
  @each $selector, $colsnumberListMap in $colSelectormap {
    @include media-breakpoint-up-unique-class($selector,$colsnumberListMap)
  }
}
@mixin media-breakpoint-up-unique-class($colSelector,$colSelectorSizesMap) {
  #{$colSelector} {
    @each $breakpoint, $colsnumber in $colSelectorSizesMap {
      @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
        @include make-col($colsnumber);
      }
    }
  }
}
@mixin make-bootstrap-col-structure-responsive($containerSelector,$rowSelector,$colSelector,$colSelectorSizesMap) {
  #{$containerSelector} {
    @include make-container();
    #{$rowSelector} {
      @include make-row();
      @if is-map($colSelector) {
        @include media-breakpoint-up-map-class($colSelector,$colSelectorSizesMap)
      } @else {
        @include media-breakpoint-up-unique-class($colSelector,$colSelectorSizesMap)
      }
    }
  }
}
@mixin make-bootstrap-col-structure($containerSelector,$rowSelector,$colSelectors,$colnumber:4) {
  #{$containerSelector} {
    @include make-container();

    #{$rowSelector} {
      @include make-row();
      @if is-map($colSelectors) {
        @each $colSelector, $colnumbers in $colSelectors {
          #{$colSelector} {
            @include make-col-ready();
            @include make-col($colnumbers);
          }
        }
      } @else {
        #{$colSelectors} {
          @include make-col-ready();
          @include make-col($colnumber);
        }
      }
    }
  }
}
